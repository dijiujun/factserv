#!/usr/bin/python

class BadSubmit(Exception): pass

def escape(s):
    xlat = {'&':'amp', '<':'lt', '>':'gt', '"':'quot', '\'':'#39', '%':'#37'}
    s = str(s)
    for x in xlat: s.replace(x,'&%s;'%xlat[x])
    return s

def select(name, options, selected):
    s="<select name='%s'>" % escape(name)
    for o in options:
        s += "<option value='%s' %s>%s</option>" % (escape(o),"selected" if o == selected else "",escape(options[o]))
    s += "</select>"
    return s;

def table(hclass, rows):
    s = "<table>"
    if hclass: s = "<table class='%s'>" % (escape(hclass),)
    for row in rows:
        s += "<tr>"
        for r in row: s += "<td>%s</td>" % (r,)
        s += "</tr>"
    s += "</table>"
    return s

# return html string with escaped values inserted, redundant whitespace removed
def html(string, values):
    if values is not None:
        string = string % tuple("" if s is None else escape(s) for s in values)
    return ' '.join(string.split())
class BadSubmit(Exception): pass

try:
    import traceback, re, cgi, sys, psycopg2
    from urllib import urlencode

    conn=psycopg2.connect('dbname=factory')
    cur=conn.cursor()
    form=cgi.FieldStorage();

    deviceid_types={"=":"is","!=":"is not","like":"is like","not like":"is not like"}
    started_types={"=":"is","!=":"is not","<":"is before",">":"is after"}
    ended_types={"=":"is","!=":"is not","<":"is before",">":"is after"}
    station_types={"=":"is","!=":"is not"}
    phase_types={"=":"is","!=":"is not"}
    testname_types={"=":"is","!=":"is not","like":"is like","not like":"is not like"}
    command_types={"=":"is","!=":"is not","like":"is like","not like":"is not like"}
    status_types={"=":"is","!=":"is not","<":"is less than",">":"is greater than"}
    stdout_types={"=":"is","!=":"is not","like":"is like","not like":"is not like"}

    # get possible test states
    cur.execute("select unnest(enum_range(NULL::states))")
    states=[r[0] for r in cur.fetchall()]

    if form.getvalue("deed") != "Reset":

        deviceid=form.getvalue('deviceid')
        deviceid_type=form.getvalue('deviceid_type')
        started=form.getvalue('started')
        started_type=form.getvalue('started_type')
        ended=form.getvalue('ended')
        ended_type=form.getvalue('ended_type')
        station=form.getvalue('station')
        station_type=form.getvalue('station_type')
        phase=form.getvalue('phase')
        phase_type=form.getvalue('phase_type')
        testname=form.getvalue('testname')
        testname_type=form.getvalue('testname_type')
        command=form.getvalue('command')
        command_type=form.getvalue('command_type')
        status=form.getvalue('status')
        status_type=form.getvalue('status_type')
        stdout=form.getvalue('stdout')
        stdout_type=form.getvalue('stdout_type')

    else:

        deviceid=None
        deviceid_type=None
        started=None
        started_type=None
        ended=None
        ended_type=None
        station=None
        station_type=None
        phase=None
        phase_type=None
        testname=None
        testname_type=None
        command=None
        command_type=None
        status=None
        status_type=None
        stdout=None
        stdout_type=None

    content="<form method=get>" + table( "query",
    [
        ("Device ID", select("deviceid_type",deviceid_types, deviceid_type or "="),  html("<input type=text name=deviceid value='%s'>",(deviceid,))),
        ("Started",   select("started_type", started_types, started_type or "="),    html("<input type=text name=started value='%s'>",(started,))),
        ("Ended",     select("ended_type", ended_types, ended_type or "="),          html("<input type=text name=ended value='%s'>",(ended,))),
        ("Station",   select("station_type", station_types, station_type or "="),    html("<input type=text name=station value='%s'>",(station,))),
        ("Phase",     select("phase_type", phase_types, phase_type or "="),          html("<input type=text name=phase value='%s'>",(phase,))),
        ("Test Name", select("testname_type",testname_types, testname_type or "="),  html("<input type=text name=testname value='%s'>",(testname,))),
        ("Command",   select("command_type",command_types, command_type or "="),     html("<input type=text name=command value='%s'>",(command,))),
        ("Status",    select("status_type",status_types, status_type or "="),        html("<input type=text name=status value='%s'>",(status,))),
        ("Stdout",    select("stdout_type",stdout_types, stdout_type or "="),        html("<input type=text name=stdout value='%s'>",(stdout,))),
    ])+"<input type=submit name=deed value=Submit><input type=submit name=deed value=Reset></form><hr>"

    where=[]

    if deviceid:
        if deviceid_type not in deviceid_types: raise BadSubmit("Invalid deviceid_type %s" % (deviceid_type,))
        where += [cur.mogrify("deviceid %s %%s" % (deviceid_type,) ,(deviceid,))]

    if started:
        if started_type not in started_types: raise BadSubmit("Invalid started_type %s" % (started_type,))
        where += [cur.mogrify("started %s %%s" % (started_type,) ,(started,))]

    if ended:
        if ended_type not in ended_types: raise BadSubmit("Invalid ended_type %s" % (ended_type,))
        where += [cur.mogrify("ended %s %%s" % (ended_type,) ,(ended,))]

    if station:
        if station_type not in station_types: raise BadSubmit("Invalid station_type %s" % (station_type,))
        where += [cur.mogrify("station %s %%s" % (station_type,) ,(station,))]

    if phase:
        if phase_type not in phase_types: raise BadSubmit("Invalid phase_type %s" % (phase_type,))
        where += [cur.mogrify("phase %s %%s" % (phase_type,) ,(phase,))]

    if testname:
        if testname_type not in testname_types: raise BadSubmit("Invalid testname_type %s" % (testname_type,))
        where += [cur.mogrify("testname %s %%s" % (testname_type,) ,(testname,))]

    if command:
        if command_type not in command_types: raise BadSubmit("Invalid command_type %s" % (command_type,))
        where += [cur.mogrify("command %s %%s" % (command_type,) ,(command,))]

    if status:
        if status_type not in status_types: raise BadSubmit("Invalid status_type %s" % (status_type,))
        where += [cur.mogrify("status %s %%s" % (status_type,) ,(status,))]

    if stdout:
        if stdout_type not in stdout_types: raise BadSubmit("Invalid stdout_type %s" % (stdout_type,))
        where += [cur.mogrify("stdout %s %%s" % (stdout_type,) ,(stdout,))]

    cur.execute("select deviceid, started, ended, station, phase, substring(testname,1,50), substring(command,1,50), status, substring(split_part(stdout,E'\n',1),1,50) from tests "+("where " + " and ".join(where) if where else "")+" order by id desc limit 100")
    if not cur.rowcount:
        content += "No match!"
    else:
        content += table("data", [("Device ID","Started","Ended","Station","Phase","Test Name","Command", "Status", "Output")] + [row for row in cur]);

    # print generated content
    print "Content-type: text/html\n\n" + html("""
    <!DOCTYPE html>
    <html>
    <head>
    <title>Test Status</title>
    <style>
        table td { padding-right: 10px; padding-left: 10px; padding-top: 4px; padding-bottom: 4px; font-family:monospace; }
        table.form { margin: 20px }
        table.form td.:nth-child(1) { text-align: right; font-weight: bold; }    
        table.data { border-collapse: collapse; }
        table.data td { border: solid 1px; }
        table.data tr:nth-child(even) { background: #CCC; }
        table.data tr:nth-child(1) { font-weight: bold; }
        input { font-family:monospace }
    </style>
    </head>
    <body>
    <h2>Test Status</h2>""",None) + content + "</tt></body></html>"

except:
    print "Content-type: text/plain\n\nAn error has occurred"
    print
    traceback.print_exc(file = sys.stdout)
    print
    for k in sorted(form.keys()): print k,"=",form.getvalue(k)
