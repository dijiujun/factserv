#!/usr/bin/python

class BadSubmit(Exception): pass 

def escape(s):
    s = str(s)
    s = s.replace("&", "&amp;") # Must be done first!
    s = s.replace("<", "&lt;")
    s = s.replace(">", "&gt;")
    s = s.replace('"', "&quot;")
    return s

def select(name, options, selected):
    s="<select name='%s'>" % escape(name)
    for o in options:
        s += "<option value='%s' %s>%s</option>" % (escape(o),"selected" if o == selected else "",escape(options[o]))
    s += "</select>"    
    return s;

def table(id, rows):
    s = "<table>"
    if id: s = "<table id='%s'>" % (escape(id),)
    for row in rows:
        s += "<tr>"
        for r in row: s += "<td>%s</td>" % (r,)
        s += "</tr>"
    s += "</table>"
    return s

try:
    import traceback, re, cgi, sys, psycopg2

    # return html string with escaped values inserted, redundant whitespace removed
    def html(string, values):
        if values is not None:
            string = string % tuple("" if s is None else escape(s) for s in values)
        return ' '.join(string.split())

    conn=psycopg2.connect('dbname=factory')
    cur=conn.cursor()
    form=cgi.FieldStorage();
    
    id_types={"=":"is","!=":"is not","<":"is less than",">":"is greater than"}
    deviceid_types={"=":"is","!=":"is not","like":"is like","not like":"is not like"}
    buildid_types={"=":"is","!=":"is not","like":"is like","not like":"is not like"}
    started_types={"=":"is","!=":"is not","<":"is before",">":"is after"}
    ended_types={"=":"is","!=":"is not","<":"is before",">":"is after"}
    station_types={"=":"is","!=":"is not"}
    state_types={"=":"is","!=":"is not"}
    phase_types={"=":"is","!=":"is not"}

    if form.getvalue("deed") != "Reset":

        deviceid=form.getvalue('deviceid')
        deviceid_type=form.getvalue('deviceid_type')
        buildid=form.getvalue('buildid')
        buildid_type=form.getvalue('buildid_type')
        created=form.getvalue('created')
        created_type=form.getvalue('created_type')
        updated=form.getvalue('updated')
        updated_type=form.getvalue('updated_type')
        state=form.getvalue('state')
        state_type=form.getvalue('state_type')
        phase=form.getvalue('phase')
        phase_type=form.getvalue('phase_type')
        station=form.getvalue('station')
        station_type=form.getvalue('station_type')

    else:
        
        deviceid=None
        deviceid_type=None
        buildid=None
        buildid_type=None
        created=None
        created_type=None
        updated=None
        updated_type=None
        state=None
        state_type=None
        phase=None
        phase_type=None
        station=None
        station_type=None

        
    content="<form method=post>" + table( "query", 
    [
        ["Device ID", select("deviceid_type",deviceid_types, deviceid_type or "="),  html("<input type=text name=deviceid value='%s'>",(deviceid,))],
        ["Build ID",  select("buildid_type", buildid_types, buildid_type or "="),    html("<input type=text name=buildid value='%s'>",(buildid,))],
        ["Created",   select("created_type", created_types, created_type or "="),    html("<input type=text name=created value='%s'>",(created,))],
        ["Updated",   select("updated_type", updated_types, updated_type or "="),    html("<input type=text name=updated value='%s'>",(updated,))],
        ["State",     select("state_type", state_types, state_type or "="),          html("<input type=text name=state value='%s'>",(state,))],
        ["Phase",     select("phase_type", phase_types, phase_type or "="),          html("<input type=text name=phase value='%s'>",(phase,))],
        ["Station",   select("station_type", station_types, station_type or "="),    html("<input type=text name=station value='%s'>",(station,))]
    ])+"<input type=submit name=deed value=Submit><input type=submit name=deed value=Reset></form><hr>"

    where=[]

    if deviceid:
        if deviceid_type not in deviceid_types: raise BadSubmit("Invalid deviceid_type %s" % (deviceid_type,))
        where += [cur.mogrify("deviceid %s %%s" % (deviceid_type,) ,(deviceid,))]

    if buildid:
        if buildid_type not in buildid_types: raise BadSubmit("Invalid buildid_type %s" % (buildid_type,))
        where += [cur.mogrify("buildid %s %%s" % (buildid_type,) ,(buildid,))]
    
    if created:
        if created_type not in created_types: raise BadSubmit("Invalid created_type %s" % (created_type,))
        where += [cur.mogrify("created %s %%s" % (created_type,) ,(created,))]
    
    if updated:
        if updated_type not in updated_types: raise BadSubmit("Invalid updated_type %s" % (updated_type,))
        where += [cur.mogrify("updated %s %%s" % (updated_type,) ,(updated,))]

    if state:
        if state_type not in state_types: raise BadSubmit("Invalid state_type %s" % (state_type,))
        where += [cur.mogrify("state %s %%s" % (state_type,) ,(state,))]

    if phase:
        if phase_type not in phase_types: raise BadSubmit("Invalid phase_type %s" % (phase_type,))
        where += [cur.mogrify("phase %s %%s" % (phase_type,) ,(phase,))]
    
    if station:
        if station_type not in station_types: raise BadSubmit("Invalid station_type %s" % (station_type,))
        where += [cur.mogrify("station %s %%s" % (station_type,) ,(station,))]

    cur.execute("select deviceid, buildid, created, updated, state, phase, station from devices "+("where " + " and ".join(where) if where else "")+" order by updated desc limit 100")
    if not cur.rowcount:
        content += "No match!"
    else:
        content += table("data", [["Device ID","Build ID","Created","Updated","State","Phase","Station"]] + [row for row in cur]);

    # print generated content
    print "Content-type: text/html\n\n" + html("""
    <!DOCTYPE html>
    <html>
    <head>
    <title>Device Status</title>
    <style>
        td { padding-right: 10px; padding-left: 10px; padding-top: 4px; padding-bottom: 4px; }
        #query { margin: 20px }
        #query td:nth-child(1) { text-align: right; font-weight: bold; }    
        #data { border-collapse: collapse; }
        #data td { border: solid 1px; }
        #data tr:nth-child(even) { background: #CCC; }
        #data tr:nth-child(1) { font-weight: bold; }
    </style>    
    </head>
    <body>
    <h2>Device Status</h2>""",None) + content + "</tt></body></html>"

except:
    print "Content-type: text/plain\n\nAn error has occurred"
    print
    traceback.print_exc(file = sys.stdout)
    print
    for k in sorted(form.keys()): print k,"=",form.getvalue(k)
