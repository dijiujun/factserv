There are two classes of CGIS.

Management CGIs are used with a browser, to provide system status or manipulate
configuration.

    stations - manage the table of test station mac addresses and station
    numbers. Changes are propgated to /etc/dnsmasq.conf. 

    builds - manage the table of build IDs, and which file is delivered for
    which build.

Process CGIs are called by the DUT, these include:

    download - return a redirect to the diagnostic tarball associated with the
    specified buildID.

    newdevice - generate a new device ID and initialize tables

    startdiag - initialize the devices table for specified deviceID for the
    current test phase

    starttest - initialize the tests table for the specified deviceID, testID,
    and command string.

    endtest - complete the entry created by starttest with exit status and
    stderr/stdout

    setprovision - update a column for provisioned data

    getprovision - get a column of provisioned data

    enddiag - end the current test phase

The test process is:

    DUT invokes 'download?buildID=X' to receive a redirect to diagnostic code
    for specified build, downloads, verifies signature, and unpacks. The
    diagnostic code contains a program 'dodiags', DUT runs this program.

    dodiags checks to see if it has a device ID pre-installed. If not it must provision one:

        Invokes 'newdevice?buildID=X&check=1', server returns an error if the current
        test station cannot perform phase1 diagnostics or provisioning is
        disabled.

        Requests the test controller to scan PCB barcode.

        Invokes 'newdevice?buildID=X&boardID=X', server generates a new unique
        deviceID, initializes a row in the devices table, returns the deviceID.

        dodiags stores the deviceID in permanent storage.

    dodiags invokes "startdiag?deviceID=X&buildID=X". Server determines which test phase should be performed and sets the  station ID server determines which test phase should be performed, returns
    the test phase as a string.

    dodiags opens the file 'phaseX' where X is the value returned by startdiag. Each line in the file has form:

        name [timeout] : command ... 

    For each line:

        Invokes 'starttest&deviceID=X&testname="name"&command="command"', the
        server prepares an entry in the tests database and returns "OK".

        Executes the command, with timeout, stdout/stderr captured as a single stream.

        Invokes 'endtest&deviceID=X&testname="name"&status="X"' with posted
        stdout data, server updates the test record with specified data. If
        the status is NOT 0, then server sets the test state to "FAILED".
        Testing is not expected to continue.

    After all tests have been performed, invokes 'enddiag&deviceID=X'. Server
    sets the test state to PASSED or COMPLETED depending on whether the last
    phase was just performed.        

A test may invoke:

    'setprovision&deviceID=X&name=dataname&value=datavalue', the server will update the provision table with dataname=datavalue

    'getprovision&deviceID=X&name=dataname', the servier will return the value for specified dataname

Any server error result in a 4XX response, DUT must treat it as fatal.  
