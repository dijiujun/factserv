#!/usr/bin/python
# DO NOT REMOVE THIS LINE - coding: utf-8

# This is the DUT test executive, runs on the target.
import traceback, os, sys, httplib, urllib, getopt, subprocess, threading, signal, time

# Test status messages, in various lanuages
test_in_progress='\n'.join(["Test in progress", "Pruebas en curso", "正在测试中"])
test_passed     ='\n'.join(["Test Passed",      "Prueba aprobada",  "通过测试"])
test_failed     ='\n'.join(["Test Failed",      "Prueba fallida" ,  "测试失败"])

# parse options
try:
    opts, args = getopt.getopt(sys.argv[1:],'p:t:')

    buildID=args[0]
    deviceID=args[1]

    pionicIP="192.168.111.1"        # IP address of pionic controller
    script_path="."                 # path to phaseX scripts

    for opt, arg in opts:
        if opt == '-p': pionicIP=arg
        elif opt == '-t': script_path=arg.rstrip("/")

except:
    print """\
Usage:

    dodiag [options] buildID deviceID

Interact with factory server and perform diagnostics. Options are:

    -p ip.ad.re.ss    - pionic IP address, default is "192.168.111.1"
    -t path           - path to downloaded test lists and executables, default is "./"
"""
    sys.exit(1)

class PionicFail(Exception): pass
# Send a request to the pionic controller, return response
# If data is provided, it is will sent as raw POST content
def pionic(request, data=None, debug=0):
    c=httplib.HTTPConnection(pionicIP)
    c.set_debuglevel(debug)
    if data is None:
        c.request("GET","/"+request)
    else:
        c.request("POST","/"+request,data)
    r=c.getresponse()
    if r.status != 200:
        raise PionicFail("%s in service %s" % (r.reason, request))
    return r.read().strip()

# wrap text to specified width
def wrap(text, width=42):
    return reduce(lambda line, word: '%s%s%s' % (line, ' \n'[(len(line)-line.rfind('\n')-1 + len(word.split('\n',1)[0]) >= width)], word), text.split(' '))

class DisplayFail(Exception): pass
# display message in ULH corner of screen
def report(text, fg="white", bg="blue"):
    try:
        pionic("display?text&size=30&fg=%s&bg=%s"%(fg,bg),wrap(text, width=42))
    except Exception as e:
        raise DisplayFail(e)

# request service from factory server via pionic port 61080
class FactoryFail(Exception): pass
def factory(service, options={}, debug=0):
    options["service"]=service
    c=httplib.HTTPConnection(pionicIP,port=61080)
    c.set_debuglevel(debug)
    options=urllib.urlencode(options)
    if len(options)<512:
        # Prefer GET so there's a log, but use POST if the URL is very long
        c.request("GET","/cgi-bin/factory?%s"%options)
    else:
        c.request("POST","/cgi-bin/factory", options, {"Content-Type":"application/x-www-form-urlencoded"})
    r=c.getresponse()
    if r.status != 200:
        raise FactoryFail("Service %s failed with '%s'" % (service, r.reason))
    return r.read().strip()

# perform an arbitrary shell command with timeout, return exit status and
# command's stdout/stderr
def perform(command, timeout):
    print "Starting '%s' for max %d seconds..." % (command, timeout)
    # Support any shell command, let the shell be session leader so os.killpg can kill it and its children
    # Note we also add script_path to the PATH
    p = subprocess.Popen(["/bin/sh","-c",command],stdout=subprocess.PIPE,stderr=subprocess.STDOUT, preexec_fn=os.setsid, env=dict(os.environ,PATH=script_path+os.pathsep+os.environ["PATH"]))
    t = threading.Timer(timeout, os.killpg, (p.pid, signal.SIGKILL))
    try:
        t.start()
        stdout = p.communicate()[0]
    finally:
        expired=not t.isAlive()
        t.cancel()
    p.stdout.close()
    stdout=stdout.strip()
    if not stdout: stdout="NO OUTPUT\n"
    status=p.returncode
    if expired:
        stdout+="\nTIMEOUT\n"
        if not status: status=-99
    print "Status:",status
    print "Stdout:"
    for l in stdout.splitlines(): print "  ",l
    return (status, stdout)

# This is the main test loop
try:
    report(test_in_progress)

    print "Build ID is", buildID
    print "Device ID is", deviceID
    print "Pionic IP is", pionicIP

    # Pass info to test processes in the environment
    os.environ["PIONICIP"]=pionicIP
    os.environ["BUILDID"]=buildID
    os.environ["DEVICEID"]=deviceID

    phase, sessionID = factory("startsession",{"deviceid":deviceID, "buildid":buildID}).split()[0:2]

    script="%s/phase%s" % (script_path, phase)
    print "Using test list %s" % script

    # flags that can be set or cleared by testlist
    flags={"IgnoreFail":False}

    # Parse the test list file in a list of dicts.
    # A dict may contain:
    #   {"op":"test", "testname":"s", "timeout":N, "command":"s"}   - execute command with timeout
    #   {"op":"push", "count":N}                                    - push a new loop counter as (0, count)
    #   {"op":"next", "index":I}                                    - increment the top loop counter, if at max pop the counter and continue. Else branch to specified index.
    #   {"op":"set", "flag":"name"}                                 - set named flag
    #   {"op":"clear", "flag":"name"}                               - clear named flag
    operation=[]
    pushed=[]
    line=0
    class ParseFail(Exception):
        def __init__(self, args):
            Exception.__init__("%s line %d - %s" % (script, line, format(args)))
    for l in open(script):
        line+=1
        l=l.split('#')[0].strip()
        if not l: continue
        if ":" in l:
            # name : timeout : command
            t=l.split(':',2)
            if len(t) != 3: raise ParseFail("expected at least 3 colons")
            testname=" ".join(t[0].split())
            if not testname: raise ParseFail("expected a test name")
            try:
                timeout=int(t[1].strip() or "60")
                if (timeout <= 0): raise ValueError
            except ValueError:
                raise ParseFail("timeout is invalid")
            command=" ".join(t[2].split())
            if not command: raise ParseFail("expected a command string")
            # catch too many ::'s
            if command.startswith(":"): raise ParseFail("command can't start with colon")
            operation.append({"op":"test", "testname":testname, "timeout":timeout, "command":command})
        elif "{" in l:
            # count {
            t=l.split("{",1)
            if t[1]: raise ParseFail("unexpected text after '{'")
            try:
                count=int(t[0].strip())
            except ValueError:
                raise ParseFail("loop count is invalid")
            operation.append({"op":"push", "count":count})
            pushed.append(len(operation))
        elif l == "}":
            if not pushed: raise ParseFail("'unexpected '}'")
            operation.append({"op":"next", "index":pushed.pop()})
        else:
            t=l.split()
            if t[0] == "set" or t[0] == "clear":
                if len(t) != 2 or not t[1] in flags: raise ParseFail("flag name is invalid")
                operation.append({"op":t[0],"flag":t[1]})
            else:
                raise ParseFail("line is invalid")

    if pushed: raise ParseFail("Missing '}'")
    if not operation: raise ParseFail("Nothing to do!")

    # ok, now iterate the operation list
    class TestFail(Exception): pass
    pushed=[]   # pushed loop counters
    index=0     # current operation index
    failing=0   # remember failure when IgnoreFail is set
    while index < len(operation):
        op=operation[index]["op"]
        if op == "test":
            testname=operation[index]["testname"]
            timeout=operation[index]["timeout"]
            command=operation[index]["command"]
            report(test_in_progress +
                   "\n\n" +
                   "Device ID : %s\n" % deviceID +
                   "Build ID  : %s\n" % buildID +
                   "Phase     : %s\n" % phase +
                   "Test      : %s\n" % testname +
               ("Loop      : %d/%d" % tuple(pushed[-1]) if len(pushed) else ""),
                   bg="purple" if failing else "blue")
            testid=factory("starttest", {"deviceid":deviceID, "testname":testname + (" %d/%d" % tuple(pushed[-1]) if len(pushed) else ""), "command":command})
            status, stdout=perform(command, timeout)
            factory("endtest", {"deviceid":deviceID, "testid":testid, "status":status, "stdout":stdout})
            if status:
                if not flags["IgnoreFail"]: break
                failing=1
        elif op == "push":
            pushed.append([1,operation[index]["count"]]) # list of [current, max]
        elif op == "next":
            pushed[-1][0]+=1                             # increment pushed current
            if pushed[-1][0] <= pushed[-1][1]:           # if current <= max
                index=operation[index]["index"]-1        # set new index, will be incremented soon
            else:
                pushed.pop()
        elif op == "set":
            flags[operation[index]["flag"]]=True
        elif op == "clear":
            flag=operation[index]["flag"]
            flags[flag]=False
            if flag=="IgnoreFail" and failing: break # die on deferred failure
        else:
            raise Exception("shouldn't get here")
        # advance to next operation
        index+=1

    # we're done, end session!
    state = factory("endsession", {"deviceid":deviceID, "sessionid":sessionID}).split()[0]

    failed = (state != "PASSED" and state != "COMPLETE")

    if failed:
        report(test_failed +
               "\n\n" +
               "Device ID : %s\n" % deviceID +
               "Build ID  : %s\n" % buildID +
               "Phase     : %s\n" % phase +
                "Test      : %s\n" % testname +
                ("Loop      : %d/%d" % tuple(pushed[-1]) if len(pushed) else "") ,
                bg="red")
    else:
        report(test_passed +
               "\n\n" +
               "Device ID : %s\n" % deviceID +
               "Build ID  : %s\n" % buildID +
               "Phase     : %s\n" % phase +
               ("\nALL TESTS COMPLETE!" if state == "COMPLETE" else ""),
               bg="green")

except:
    t,v,tb=sys.exc_info()
    traceback.print_exc()
    if t != DisplayFail:
        report(test_failed+"\n\n%s@%d: %s" % (t.__name__,tb.tb_lineno,str(v)), bg="red", fg="white")

# No exit!
finally:
    while True:
        print "Reboot now"
        time.sleep(30)
