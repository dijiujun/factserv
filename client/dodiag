#!/usr/bin/python
# DO NOT REMOVE THIS LINE - coding: utf-8

# This is the DUT test executive, runs on the target.
import traceback, os, sys, httplib, urllib, getopt, subprocess, threading, signal

buildID=None                    # must be specified on command line
deviceID=None                   # can be specified, otherwise we'll try to discover it
pionicIP="192.168.111.1"        # IP address of pionic controller
serverIP=None                   # IP address of the factory server                      
script_path="."                 # Path to phaseX scripts

# Things we say, in various lanuages
test_in_progress=("Test in progress", "Pruebas en curso", "正在测试中" )
scan_barcode    =("Scan barcode",     "Escanear código",  "扫描条形码" )
test_passed     =("Test Passed",      "Prueba aprobada",  "通过测试"  )
test_failed     =("Test Failed",      "Prueba fallida" ,  "测试失败"  )

# Given one of the strings above, return array of languages of interest
# In this case, English and Chinese
def language(s): return [s[0],s[2]]

# parse options
try:
    opts, args = getopt.getopt(sys.argv[1:],'p:s:t:')
except:
    print """\
Usage:

    dodiags [options] buildID [deviceID]

Interact with factory server and perform diagnostics. Options are:

    -p ip.ad.re.ss    - pionic IP address, default is "192.168.111.1"
    -s ip.ad.re.ss    - factory server IP address, default is to request it from pionic
    -t path           - path to "phaseX" test lists, default './' 

The caller must always provide the build ID.

The caller also provides the device ID if programmed. If not given, dodiag will
attempt to read it from the nominal device ID file, and if that fails it will
scan the PCB barcode and use that as the device ID. 

A phase 1 diagnostic must program DEVICEID from the environment into long term
storage where the caller can find it.
"""
    sys.exit(1)

if len(args) < 1 or len(args) > 2: raise Exception("Build ID not specified")

buildID=args[0]
if len(args) > 1: deviceID=args[1]

for opt, arg in opts:
    if opt == '-p': pionicIP=arg
    elif opt == '-s': serverIP=arg
    elif opt == '-t': scriptpath=arg.rstrip("/"); 

class PionicFail(Exception): pass
# Send a request to the pionic controller, return response 
# The IP of the pionic controller is hard coded
# If data is provided, it is will sent as raw POST content
def pionic(request, data=None, debug=0):
    c=httplib.HTTPConnection(pionicIP)
    c.set_debuglevel(debug)
    if data is None:
        c.request("GET","/"+request)
    else:
        c.request("POST","/"+request,data)
    r=c.getresponse()
    if r.status != 200:
        raise PionicFail("%s in service %s" % (r.reason, request))
    return r.read().strip()    

# display message in center or top-left of screen
def badge(text, fg="white", bg="blue", size=90):
    if text is None:
        pionic("display?clear&fg=%s&bg=%s"%(fg,bg))
    else:
        pionic("display?text&badge&size=%s&fg=%s&bg=%s"%(size,fg,bg), text)

# wrap text to 42 columns
def wrap(text): return reduce(lambda line, word: '%s%s%s' % (line, ' \n'[(len(line)-line.rfind('\n')-1 + len(word.split('\n',1)[0]) >= 42)], word), text.split(' '))

def report(text, fg="white", bg="blue", size=30):
    pionic("display?text&size=%d&fg=%s&bg=%s"%(size,fg,bg),wrap(text))

# request factory service from serverIP
class ServerFail(Exception): pass
def server(service, options={}, debug=0):
    options["service"]=service
    c=httplib.HTTPConnection(serverIP)
    c.set_debuglevel(debug)
    options=urllib.urlencode(options)
    if len(options)<512:
        # Prefer GET so there's a log, but use POST if the URL is very long
        c.request("GET","/cgi-bin/factory?%s"%options)
    else:
        c.request("POST","/cgi-bin/factory", options, {"Content-Type":"application/x-www-form-urlencoded"})
    r=c.getresponse()
    if r.status != 200:
        raise ServerFail("Service %s failed with '%s'" % (service, r.reason))
    return r.read().strip()    

# perform an arbitrary shell command with timeout, return exit status and
# command's stdout/stderr
def perform(command, timeout):
    print "Starting '%s' for max %d seconds..." % (command, timeout)
    # Support any shell command, let the shell be session leader so os.killpg can kill it and its children
    p = subprocess.Popen(["/bin/sh","-c",command],stdout=subprocess.PIPE,stderr=subprocess.STDOUT, preexec_fn=os.setsid)
    t = threading.Timer(timeout, os.killpg, (p.pid, signal.SIGKILL))
    try:
        t.start()
        stdout = p.communicate()[0]
    finally:
        expired=not t.isAlive()
        t.cancel()
    p.stdout.close()
    stdout=stdout.strip()
    if not stdout: stdout="NO OUTPUT\n"  
    status=p.returncode
    if expired:
        stdout+="\nTIMEOUT\n"
        if not status: status=-99
    print "Status:",status
    print "Stdout:"    
    for l in stdout.splitlines(): print "  ",l
    return (status, stdout)


# This is the main test loop
class TestFail(Exception): pass
try:
    badge("\n".join(language(test_in_progress)))

    print "Build ID is", buildID
    print "Pionic IP is", pionicIP 

    if serverIP is None:
        print "Factory IP unknown, requesting from pionic"
        serverIP=pionic("factory")
    print "Server IP is",serverIP

    if deviceID is None:
        print "Proivisioning deviceID"
        server("newdevice",{"buildid": buildID})
        badge("\n".join(language(scan_barcode)), fg="black", bg="yellow")
        while True:
           deviceID=pionic("getbar?poll&timeout=4") # poll with shortish timeout
           if deviceID != "": break
        badge(None)
	print "Got %s, updating server" % (deviceID,)
        server("newdevice",{"deviceid":deviceID, "buildid": buildID})
   
    print "Device ID is", deviceID    
    
    # Pass info to test processes in the environment
    os.environ["SERVERIP"]=serverIP
    os.environ["PIONICIP"]=pionicIP
    os.environ["BUILDID"]=buildID
    os.environ["DEVICEID"]=deviceID 

    phase=server("startdiag",{"deviceid":deviceID, "buildid":buildID})

    script="%s/phase%s" % (script_path, phase)
    print "Using script %s"%(script,)
    line=0
    for l in open(script):
        line+=1
        l=l.split('#')[0].strip()
        if not l: continue
        print "%s line %d: %s" % (script, line, l)
        t=l.split(':',2)
        if len(t) != 3: raise TestFail("%s line %d is invalid" % (script, line))
        testname=" ".join(t[0].split())
        if not testname: raise TestFail("%s line %d name is invalid" % (script, line))
        try:
            timeout=int(t[1].strip() or "60")
            if (timeout <= 0): raise ValueError
        except ValueError:
            raise TestFail("%s line %d timeout is invalid" % (script, line))
        command=" ".join(t[2].split())
        if not command: raise TestFail("%s line %d command is invalid" % (script, line))
        # catch too many ::'s
        if command.startswith(":"): raise TestFail("%s line %d command is invalid" % (script, line))
        report(("\n".join(language(test_in_progress))+"\n\n"+
                "Device ID : %s\n"+
                "Build ID  : %s\n"+
                "Phase     : %s\n"+
                "Test      : %s\n"+
                "Timeout   : %s\n"+
                "Command   : %s\n") % (deviceID, buildID, phase, testname, timeout, command))
        testid=server("starttest", {"deviceid":deviceID, "testname":testname, "command":command})
        status, stdout=perform(command, timeout)
        server("endtest", {"deviceid":deviceID, "testid":testid, "status":status, "stdout":stdout})
        if status: raise TestFail("'%s' exit status %d (%s line %d)" % (testname, status, script, line))

    server("enddiag", {"deviceid":deviceID})

    badge("\n".join(language(test_passed))+"\n"+deviceID, bg="green")

except:
    t,v,tb=sys.exc_info()
    traceback.print_exc()
    report("\n".join(language(test_failed))+"\n\n%s@%d: %s" % (t.__name__,tb.tb_lineno,str(v)), bg="red", fg="white")
    sys.exit(1)

