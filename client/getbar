#!/usr/bin/python
# DO NOT REMOVE THIS LINE - coding: utf-8

from __future__ import print_function
import traceback, os, sys, httplib, urllib

# This is used as part of the deviceID generation process, performs the following actions:
#
#     1) Send 'newdevice' request to server to check if test station supports phase 1
#     2) Send 'scan barcode' screen to pionic
#     3) Send 'getbar' request to pionic, wait (forever) for response
#     4) Clear the screen to blue
#     5) Print the barcode string to stdout
#     6) Exit 0
#
# In the event of error, written to stderr, paints the screen red and exits 1

try:
    pionic = sys.argv[1]
    buildid = sys.argv[2]
except:
    raise Exception("Usage: getbar pionicIP buildID")

try:
    # given host, path, options, post data
    # GET http://host/request[?options=val&option=value", or POST with data in stdin.
    # return (0, barcode) or (1, error_text)
    def http(host, request, options={}, data=None):
        o=[]
        for k in options:
            if options[k] is None:
                o.append(urllib.quote(str(k)))
            else:
                o.append(urllib.quote(str(k))+"="+urllib.quote(str(options[k])))
        if o:
            request += "?"+"&".join(o)

        # warn("host=%s request=%s" % (host, request))
        c=httplib.HTTPConnection(host)
        if data is None:
            c.request("GET","/"+request)
        else:
            c.request("POST","/"+request, data)
	
        r=c.getresponse()
	if r.status != 200:
            return (1, r.reason)
        return (0,r.read().strip())

    # access factory via pionic port 61080
    factory=pionic+":61080"

    err, out = http(factory, "cgi-bin/factory", options={"service":"newdevice", "buildid":buildid});
    if err: raise Exception("\"newdevice\" request returned \"%s\"" % out);

    err, out = http(pionic, "display", options={"text":None, "badge":None, "size":70, "fg":"black", "bg":"yellow" }, data="Scan barcode\nEscanear código\n扫描条形码")
    if err: raise Exception("\"display\" request returned \"%s\"" % out)

    err, out = http(pionic, "getbar", options={"flush":None, "timeout":3})
    while err and out == "Timeout":
        err, out=http(pionic, "getbar", options={"timeout":3})
    if err: raise Exception("\"getbar\" request returned \"%s\"" % out)
    barcode=out

    err, out = http(pionic, "display", options={"clear":None, "bg":"blue"}, data"Scan OK\nEscanear OK\n扫描确定")
    if err: raise Exception("pionic \"display\" returned \"%s\"" % out)

    print(barcode)

except:
    t,v,tb=sys.exc_info()
    try:
        http(pionic, "display", options={"clear":None, "bg":"red"}, data="Scan failed\nEscanear fallido\n扫描失败")
    except:
        pass
    print ("Error line %d - %s" % (tb.tb_lineno, str(v)), file=sys.stderr)
    sys.exit(1)
