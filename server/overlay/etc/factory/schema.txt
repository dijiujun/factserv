-- Factory database schema
-- To connect to postgresql: sudo -u postgres psql
-- Assumes database in a default state: 'drop database factory; drop user factory; drop user "www-data";'
-- Note hyphenation must be quoted.
-- This file can be loaded from psql command line with '\i path/to/this/file'

-- create the database
create database factory;
\c factory;

-- create the user
create user factory;

-- generic function to return uct
create or replace function uct() returns timestamp as $$ select now() at time zone 'uct'; $$ language sql;

-- Test station managment, see stations admin CGI
create table stations (
    station int primary key check (station > 0 and station <= 200),
    mac macaddr unique not null,
    fixture varchar,
    comment varchar
);
grant select, update, insert, delete, trigger on stations to factory;

-- Info for each supported software build, see builds admin CGI
-- The build ID must be unique across all platforms
create table builds (
    buildid varchar primary key,
    provision boolean default false,
    phase1 int array,
    phase2 int array,
    phase3 int array,
    phase4 int array,
    comment varchar
);
-- legacy
alter table builds drop "filename";
grant select, update, insert, delete, trigger on builds to factory;

-- test state, per device, installed by various process CGIs
create type states as enum('TESTING','FAILED','PASSED','COMPLETE');
create table devices (
    deviceid varchar primary key,
    buildid varchar,
    created timestamp not null default uct(),
    updated timestamp not null default uct(),
    state states not null default 'TESTING',
    phase int not NULL default 1,
    station int not NULL default 0
);

-- always update 'updated' whenever the device status changes
create or replace function updated() returns trigger as $$ begin new.updated=uct(); return new; end; $$ language plpgsql;
create trigger updated before update on devices for each row execute procedure updated();
grant select, update, insert, trigger on devices to factory;

-- Provisioned data, per device, create with provision process CGI
-- Columns starting with 'p_' are magic
create table provisioned (
    deviceid varchar primary key,
    backhauled boolean default false,
    p_mac1 macaddr
);
grant select, update, insert, trigger on provisioned to factory;

-- Test results, per test, per device, maintain be various process CGIs
create table tests (
    id serial primary key,
    deviceid varchar not null,
    started timestamp not null default uct(),
    ended timestamp,
    station int not null,
    phase int not null,
    testname varchar not null,
    command varchar not null,
    status int,
    stdout varchar
);
grant select, update, insert, trigger on tests to factory;

-- also let factory increment serial counters
grant usage,select on all sequences in schema public to factory;

-- web server can act as factory
create user "www-data" in role factory;

-- root can select stations
create user root;
grant select on stations to root;
