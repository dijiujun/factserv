#!/usr/bin/python2

import traceback, sys, os, re, psycopg2
from util import *

#authenticate("Technician","tech:techx4")

class BadSubmit(Exception): pass

try:
    conn=psycopg2.connect('dbname=factory')
    cur=conn.cursor()

    form=submitted()

    drill=form.getvalue("drill")
    if drill:
        cur.execute("select id, deviceid, date_trunc('seconds',started), date_trunc('seconds',ended), station, phase, testname, command, status, stdout, " +
                    "ended is NULL and started < uct()-interval '10 minutes' as stale " +
                    "from tests where id=%s",(drill,))

        id, deviceid, started, ended, station, phase, testname, command, status, stdout, stale = cur.fetchone()
        content=table(("drill",
                        [["ID",escape(id)],["Device ID",escape(deviceid)],["Started",escape(started)],["Ended",escape(ended)],["Station",escape(station)],
                        ["Phase",escape(phase)],["Test Name",escape(testname)],["Command",escape(command)],["Status",status],["Output",escape(stdout, align=True)]]))

    else:

        deviceid_types={"~":"contains",   "!~":"doesn't contain", "=":"is"}
        started_types= {"<=":"is before", ">=":"is after"}
        ended_types=   {"<=":"is before", ">=":"is after"}
        station_types= {"=":"is",         "!=":"is not"}
        phase_types=   {"=":"is",         "!=":"is not"}
        testname_types={"~":"contains",   "!~":"doesn't contain"}
        command_types= {"~":"contains",   "!~":"doesn't contain"}
        status_types=  {"=":"is",         "!=":"is not"}
        stdout_types=  {"~":"contains",   "!~":"doesn't contain"}

        # get possible test states
        cur.execute("select unnest(enum_range(NULL::states))")
        states=[r[0] for r in cur.fetchall()]

        deviceid=form.getvalue('deviceid')
        deviceid_type=form.getvalue('deviceid_type') or "~"
        started=form.getvalue('started')
        started_type=form.getvalue('started_type') or ">="
        ended=form.getvalue('ended')
        ended_type=form.getvalue('ended_type') or ">="
        station=form.getvalue('station')
        station_type=form.getvalue('station_type') or "="
        phase=form.getvalue('phase')
        phase_type=form.getvalue('phase_type') or "="
        testname=form.getvalue('testname')
        testname_type=form.getvalue('testname_type') or "~"
        command=form.getvalue('command')
        command_type=form.getvalue('command_type') or "~"
        status=form.getvalue('status')
        status_type=form.getvalue('status_type') or "="
        stdout=form.getvalue('stdout')
        stdout_type=form.getvalue('stdout_type') or "~"

        sort=form.getvalue('sort') or 'desc'
        limit=form.getvalue('limit') or "100"

        where=[]

        if deviceid:
            if deviceid_type not in deviceid_types: raise BadSubmit("Invalid deviceid_type %s" % deviceid_type)
            where += [cur.mogrify("lower(deviceid) %s lower(%%s)" % deviceid_type, (deviceid,))]

        if started:
            if started_type not in started_types: raise BadSubmit("Invalid started_type %s" % started_type)
            where += [cur.mogrify("date_trunc('seconds',started) %s %%s" % started_type, (started,))]

        if ended:
            if ended_type not in ended_types: raise BadSubmit("Invalid ended_type %s" % ended_type)
            where += [cur.mogrify("date_trunc('seconds',ended) %s %%s" % ended_type, (ended,))]

        if station:
            if station_type not in station_types: raise BadSubmit("Invalid station_type %s" % station_type)
            where += [cur.mogrify("station %s %%s" % station_type, (station,))]

        if phase:
            if phase_type not in phase_types: raise BadSubmit("Invalid phase_type %s" % phase_type)
            where += [cur.mogrify("phase %s %%s" % phase_type, (phase,))]

        if testname:
            if testname_type not in testname_types: raise BadSubmit("Invalid testname_type %s" % testname_type)
            where += [cur.mogrify("lower(testname) %s lower(%%s)" % testname_type, (testname,))]

        if command:
            if command_type not in command_types: raise BadSubmit("Invalid command_type %s" % command_type)
            where += [cur.mogrify("lower(command) %s lower(%%s)" % command_type, (command,))]

        if status:
            if status_type not in status_types: raise BadSubmit("Invalid status_type %s" % status_type)
            where += [cur.mogrify("status %s %%s" % status_type, (status,))]

        if stdout:
            if stdout_type not in stdout_types: raise BadSubmit("Invalid stdout_type %s" % stdout_type)
            where += [cur.mogrify("lower(stdout) %s lower(%%s)" % stdout_type, (stdout,))]

        content=("<form method=get>" +
                    table(("form",
                        [
                            ["Device ID", select("deviceid_type", deviceid_types, deviceid_type), "<input type=text name=deviceid value='%s'>" % escape(deviceid)],
                            ["Started", select("started_type", started_types, started_type), "<input type=text name=started value='%s'>" % escape(started)],
                            ["Ended", select("ended_type", ended_types, ended_type), "<input type=text name=ended value='%s'>" % escape(ended)],
                            ["Station", select("station_type", station_types, station_type), "<input type=text name=station value='%s'>" % escape(station)],
                            ["Phase", select("phase_type", phase_types, phase_type), "<input type=text name=phase value='%s'>" % escape(phase)],
                            ["Test Name", select("testname_type", testname_types, testname_type), "<input type=text name=testname value='%s'>" % escape(testname)],
                            ["Command", select("command_type", command_types, command_type), "<input type=text name=command value='%s'>" % escape(command)],
                            ["Status", select("status_type", status_types, status_type), "<input type=text name=status value='%s'>" % escape(status)],
                            ["Output", select("stdout_type", stdout_types, stdout_type), "<input type=text name=stdout value='%s'>" % escape(stdout)],
                            ["Sort", select("sort", {"asc":"oldest first", "desc":"newest first"}, sort),  ""],
                            ["Limit", "", "<input type=text name=limit value='%s'>" % limit],
                        ])) +
                      "<input type=submit value='Filter' style='float:left; vertical-align:text-bottom'>"+
                 "</form>"+
                 "<form method=get><input type=submit value=Reset style='vertical-align:text-bottom'></form>" +
                 "<hr>")

        cur.execute("select id, deviceid, date_trunc('seconds',started), date_trunc('seconds',ended), station, phase, testname, command, status, split_part(stdout,E'\n',1), " +
                    "ended is NULL and started < uct()-interval '10 minutes' as stale " +
                    "from tests " +
                    ("where " + " and ".join(where) if where else "") +
                    " order by id %s limit %s" % (sort, limit))
        if not cur.rowcount:
            content += "No match!"

        else:
            rows=cur.fetchall()

            content += table(("data",
                              [
                                  [
                                      help("Device ID", "Click the button to see extended status for the specific test."),
                                      help("Started", "UCT time that the test started."),
                                      help("Ended","UCT time that the test ended. If &quot;None&quot; the test is still in progress (or was aborted)."),
                                      help("Station","Station that performed the test."),
                                      "Phase",
                                      "Test Name",
                                      "Command",
                                      help("Status", "The test's exit status, 0 indicates success, any other indicates failure."),
                                      "Output"
                                  ]
                              ] +
                              [( ("FAILED" if status else "PASSED") if ended else "STALE" if stale else "TESTING",
                                  [ click(deviceid,"",{'drill':escape(id)}) ] +
                                  [ started, ended, station, phase, testname, command, status, stdout ]
                               ) for id, deviceid, started, ended, station, phase, testname, command, status, stdout, stale in rows
                              ]
                            ))

    # print generated content
    print html("Test History",
               """
                table.drill { border-collapse: collapse; }
                table.drill td { border: solid 1px; }
                table.drill td:nth-child(1) { font-weight: bold; }
                table.drill td:nth-child(2) { white-space: pre; }
               """,
               content + tick_footer())

except:
    print "Content-type: text/plain\n\nAn error has occurred"
    print
    traceback.print_exc(file = sys.stdout)
    print
    for k in sorted(form.keys()): print k,"=",form.getvalue(k)
