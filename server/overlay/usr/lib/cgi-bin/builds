#!/usr/bin/python2

# Configure test station ID vs MAC address and restart dnsmasq.

import traceback, re, sys, psycopg2, os, datetime
from util import *

authenticate("Supervisor", "supervisor:superx5")

maxstations=50

# tarball base directory
base="/var/www/html/downloads"

# return
try:

    def fileinfo(buildid):
        tarball = os.path.join(base, "%s.tar.gz" % buildid)
        try:
            (size, mtime)=os.stat(tarball)[6:9:2]
            return "<div style='color:white; background-color:green'>%s, %d bytes</div>" % (datetime.datetime.fromtimestamp(mtime).strftime("%Y-%m-%d %H:%M:%S"), size)
        except:
            return "<div style='color:white; background-color:red'>NO FILE</div>"

    # make sure build ID is well formed, and maybe is in the database
    # especially it must not contain filesystem meta-characters
    def validate(buildid, exists=False):
        if not buildid: raise Exception("Missing build ID")
        s=re.search('[^-_.a-zA-Z0-9]',buildid)
        if s: raise Exception("Build ID cannot contain '%s'" % s.group())
        if buildid.startswith("."): raise Exception("Build ID cannot start with '.'")
        if exists:
            cur.execute("select 1 from builds where buildid=%s",(buildid,))
            if not cur.rowcount: raise Exception("Build ID %s does not exist" % buildid)

    # return form with specified values, buildid, comment, phase1[50], phase2[50], phase3[50], phase4[50]
    # allow build id entry only if not currently defined
    def makeform(row):
        row=escape(list(row) if row else [None for n in range(2 + maxstations*4)])
        return table(("form",
                      [
                          ["Build ID",            "<input name=buildid type=text>" if row[0] == "" else escape(row[0])],
                          ["Phase 1 stations",    ''.join("<input name=phase1-%d type=text size=3 value='%s'>" % (n,row[1+n+maxstations*0]) for n in range(1,maxstations+1))],
                          ["Phase 2 stations",    ''.join("<input name=phase2-%d type=text size=3 value='%s'>" % (n,row[1+n+maxstations*1]) for n in range(1,maxstations+1))],
                          ["Phase 3 stations",    ''.join("<input name=phase3-%d type=text size=3 value='%s'>" % (n,row[1+n+maxstations*2]) for n in range(1,maxstations+1))],
                          ["Phase 4 stations",    ''.join("<input name=phase4-%d type=text size=3 value='%s'>" % (n,row[1+n+maxstations*3]) for n in range(1,maxstations+1))],
                          ["Comment",              "<input name=comment type=text value='%s'>" % escape(row[1])]
                      ]))

    # return validated list of (buildid, comment, phase1[], phase2[], phase3[], phase4[]) from the submitted form
    def getvalues(form):
        buildid=form.getvalue("buildid", default="").strip()
        validate(buildid)

        comment=' '.join(form.getvalue("comment", default="").split())
        p1=sorted([int(s) for s in (form.getvalue("phase1-%d" % n) for n in range(1,maxstations+1)) if s is not None])
        p2=sorted([int(s) for s in (form.getvalue("phase2-%d" % n) for n in range(1,maxstations+1)) if s is not None])
        p3=sorted([int(s) for s in (form.getvalue("phase3-%d" % n) for n in range(1,maxstations+1)) if s is not None])
        p4=sorted([int(s) for s in (form.getvalue("phase4-%d" % n) for n in range(1,maxstations+1)) if s is not None])

        if not len(p1):
            raise Exception("Must specify at least one phase 1 test station")

        if len(p3) and not len(p2):
            raise Exception("Can't specify phase 3 test stations without phase 2")

        if len(p4) and not len(p3):
            raise Exception("Can't specify phase 4 test stations without phase 3")

        for n in tuple(p1+p2+p3+p4):
            if n < 0 or n > 200:
                raise Exception("Test station must be 0 to 200")

        # merge all into a list of 2+(4*maxstations) strings/Nones
        return tuple([buildid, comment] + sum([[str(x) for x in p]+[None for x in xrange(len(p),maxstations)] for p in [p1,p2,p3,p4]],[]))

    conn=psycopg2.connect('dbname=factory')
    cur=conn.cursor()

    form=submitted()

    content=None

    if 'action' in form:
        action=[form.getvalue('action'), None]
        if '=' in action[0]: action = form.getvalue('action').split('=',1)
        if action[0] == 'none':
            pass
        elif action[0] == 'new':
            content = (
                "<form method=get>" +
                makeform(None) +
                "<p>" +
                "<button name=action value=insert>Save</button>" +
                "</form>" )
        elif action[0] == 'insert':
            cur.execute("insert into builds (buildid, comment " +
                        "".join(", phase1[%d]" % x for x in range(1,maxstations+1)) +
                        "".join(", phase2[%d]" % x for x in range(1,maxstations+1)) +
                        "".join(", phase3[%d]" % x for x in range(1,maxstations+1)) +
                        "".join(", phase4[%d]" % x for x in range(1,maxstations+1)) +
                        ") values (" +
                        ",".join(["%s"]*(2+(maxstations*4))) +
                        ")", getvalues(form))
            conn.commit()
            reload()
        elif action[0] == "del":
            content = ("<form method=get>Really delete build ID '%s'? "% action[1] +
                       "<button name=action value='really=%s'>Yes</button>" % escape(action[1]) +
                       "</form>")
        elif action[0] == "really":
            validate(action[1], exists=True)
            tarball=os.path.join(base,"%s.tar.gz" % action[1])
            if os.path.isfile(tarball): os.remove(tarball)
            cur.execute("delete from builds where buildid=%s", (action[1],))
            conn.commit()
            reload()
        elif action[0] == "edit":
            cur.execute("select buildid, comment " +
                        "".join(", phase1[%d]" % n for n in range(1,maxstations+1)) +\
                        "".join(", phase2[%d]" % n for n in range(1,maxstations+1)) +\
                        "".join(", phase3[%d]" % n for n in range(1,maxstations+1)) +\
                        "".join(", phase4[%d]" % x for x in range(1,maxstations+1)) +\
                        " from builds where buildid = %s", (action[1],))
            row = cur.fetchone()
            content = ("<form method=get>" +
                       makeform(row) +
                       "<p>" +
                       "<button name=action value='update=%s'>Update</button>" % escape(row[0]) +
                       "</form>")
        elif action[0] == "clone":
            cur.execute("select '', comment " +
                        "".join(", phase1[%d]" % x for x in range(1,maxstations+1)) +\
                        "".join(", phase2[%d]" % x for x in range(1,maxstations+1)) +\
                        "".join(", phase3[%d]" % x for x in range(1,maxstations+1)) +\
                        "".join(", phase4[%d]" % x for x in range(1,maxstations+1)) +\
                        " from builds where buildid = %s", (action[1],))
            row = cur.fetchone()
            content = ("<form method=get>" +
                       makeform(row) +
                       "<p>" +
                       "<button name=action value=insert>Save</button>" +
                       "</form>")
        elif action[0] == 'update':
            values=getvalues(form)
            cur.execute("update builds set comment=%s" +
                        "".join(", phase1[%d]=%%s" % x for x in range(1,maxstations+1)) +
                        "".join(", phase2[%d]=%%s" % x for x in range(1,maxstations+1)) +
                        "".join(", phase3[%d]=%%s" % x for x in range(1,maxstations+1)) +
                        "".join(", phase4[%d]=%%s" % x for x in range(1,maxstations+1)) +
                        " where buildid=%s", values[1:]+(action[1],))
            conn.commit()
            reload()
        elif action[0] == "upload":
            validate(action[1], exists=True)
            if not "upload" in form:
                # note the action is left as is, so we'll come back here with an 'upload' element
                content = ("<form enctype=multipart/form-data method=post>" +
                           "Select a diagnostic tarball for build ID <b>%s</b> and click 'Upload'." % action[1] +
                           "<p><input type=file name=upload accept=.tar.gz> <input type=submit value=Upload>" +
                           "</form>"+
                           "<p><b>Note:</b> The selected file must be a gzipped tarball. It will be saved as '%s.tar.gz', regardless of its original name." % action[1])
            else:
                upload=form["upload"]
                if not upload.file: raise Exception("Malformed upload submit")
                chunk = upload.file.read(65536)
                if not chunk: raise Exception("No upload content")
                f = file(os.path.join(base, "%s.tar.gz"%action[1]), 'wb')
                while 1:
                    f.write(chunk)
                    chunk = upload.file.read(65536)
                    if not chunk: break
                f.close()
                reload()

        else:
            raise Exception("Invalid action = %s %s" % tuple(action))

    if not content:
        # Generate the default page content
        cur.execute("select buildid, comment" +
                    "".join(", phase1[%d]" % x for x in range(1,maxstations+1)) +
                    "".join(", phase2[%d]" % x for x in range(1,maxstations+1)) +
                    "".join(", phase3[%d]" % x for x in range(1,maxstations+1)) +
                    "".join(", phase4[%d]" % x for x in range(1,maxstations+1)) +
                    " from builds order by buildid")
        if not cur.rowcount:
            content = "No builds defined"
        else:
            rows=cur.fetchall(); # get list of tuples
            content = table(("data",
                             [
                                 ["Build ID", "Phase 1", "Phase 2", "Phase 3", "Phase 4", "Comment", "Tarball", "&nbsp;"]
                             ] +
                             [ [ row[0],
                                 ", ".join(" ".join(escape(row[2:2+maxstations])).split()),
                                 ", ".join(" ".join(escape(row[52:52+maxstations])).split()),
                                 ", ".join(" ".join(escape(row[102:102+maxstations])).split()),
                                 ", ".join(" ".join(escape(row[152:152+maxstations])).split()),
                                 row[1],
                                 fileinfo(row[0]),
                                 ( "<form method=get>" +
                                   "<button name=action value='edit=%s'>Edit</button>" % escape(row[0]) +
                                   "<button name=action value='del=%s'>Del</button>" % escape(row[0]) +
                                   "<button name=action value='clone=%s'>Clone</button>" % escape(row[0]) +
                                   "<button name=action value='upload=%s'>Upload</button>" % escape(row[0]) +
                                   "</form>" )
                               ] for row in rows
                             ]
                            ))
        content += "<p><form method=get><button name=action value=new>New build</button></form>"

    # print generated content
    print html("Build Manager",
               "table.data tr:nth-child(even) { background: #CCCCCC; }",
               content + tick_footer())

except Exception as e:
    print "Content-type: text/plain; charset=utf-8\n\nAn error has occurred"
    print
    traceback.print_exc(file = sys.stdout)
    print
    for k in sorted(form.keys()): print k,"=",form.getvalue(k)
