#!/usr/bin/python2

# Configure test station ID vs MAC address and restart dnsmasq.

import traceback, re, sys, psycopg2, os, datetime
from util import *

phases=4	# number of phases
maxstations=50	# stations per phase
other=3 	# number of database fields before stations

# tarball base directory
base="/var/www/html/downloads"

# return
try:
    authenticate("Supervisor", "supervisor:superx5")

    def fileinfo(buildid):
        tarball = os.path.join(base, "%s.tar.gz" % buildid)
        try:
            (size, mtime)=os.stat(tarball)[6:9:2]
            return "<div style='color:white; background-color:green'>%s, %d bytes</div>" % (datetime.datetime.fromtimestamp(mtime).strftime("%Y-%m-%d %H:%M:%S"), size)
        except:
            return "<div style='color:white; background-color:red'>NO FILE</div>"

    # make sure build ID is well formed, and maybe is in the database
    # it must not contain filesystem meta-characters
    def validate(buildid, exists=False):
        if not buildid: raise Exception("Missing build ID")
        s=re.search('[^-_.a-zA-Z0-9]',buildid)
        if s: raise Exception("Build ID cannot contain '%s'" % s.group())
        if buildid.startswith("."): raise Exception("Build ID cannot start with '.'")
        if exists:
            cur.execute("select 1 from builds where buildid=%s",(buildid,))
            if not cur.rowcount: raise Exception("Build ID %s does not exist" % buildid)

    # return form with specified values, buildid, comment, match, phase1[50], phase2[50], phase3[50], phase4[50]
    # allow build id entry only if not currently defined
    def makeform(row):
        row=escape(list(row) if row else [None for n in range(other + maxstations*4)])
        return table(("form",
            [
                [help("Build ID","""
A string provided by the DUT which uniquely represents its device type and
software build.

The build ID may only contain letters, digits, period, dash, and underscore,
and may not start with a period.
                """), row[0] if row[0] else "<input name=buildid type=text>"],

                [help("Phase 1 stations","""
Up to 50 test stations that are allowed to perform phase 1
diagnostics for this build ID.<p>

Phase 1 diagnostics are mandatory, so at least one test station
                must be defined.
                """), "".join("<input class=narrow name=phase1-%d type=text value='%s'>" % (n+1,row[other+n+maxstations*0]) for n in range(maxstations))],

                [help("Phase 2 stations","""
Up to 50 test stations that are allowed to perform phase 2 diagnostics for this
build ID, if any.
                """), "".join("<input class=narrow name=phase2-%d type=text value='%s'>" % (n+1,row[other+n+maxstations*1]) for n in range(maxstations))],

                [help("Phase 3 stations","""
Up to 50 test stations that are allowed to perform phase 3 diagnostics for this
build ID, if any.

Phase 3 test stations may only be defined if at least one phase 2 test station
is defined.
                """), "".join("<input class=narrow name=phase3-%d type=text value='%s'>" % (n+1,row[other+n+maxstations*2]) for n in range(maxstations))],

                [help("Phase 4 stations","""
Up to 50 test stations that are allowed to perform phase 4 diagnostics for this
build ID, if any.

Phase 4 test stations may only be defined if at least one phase 3 test station
is defined.
                """), "".join("<input class=narrow name=phase4-%d type=text value='%s'>" % (n+1,row[other+n+maxstations*3]) for n in range(maxstations))],

                [help("Match","""
An optional POSIX regular expression.

If a DUT's build ID is not found in the database, the system will look for a
record with a matching regex.

If exactly one match is found, then the parameters and diagnostic tarball of
the matched record will be used for that DUT. All log entries will report the
DUTs actual build ID.

The intention is to allow creation of a generic diagnostic configuration which
can be used across multiple builds.

Note the regex is head-anchored, i.e. a &quot;^&quot; is implicitly pre-pended to the
regex and should not be specified.
"""), "<input name=match type=text value='%s'>" % row[2]],

                [help("Comment", """
An optional string that appears in the build list, to help keep track of what
each one is for.
                """), "<input name=comment type=text value='%s'>" % row[1]]
            ]))

    # return validated list of (buildid, comment, match, phase1[], phase2[], phase3[], phase4[]) from the submitted form
    def getvalues(form, buildid=None):
        if buildid is None: buildid = form.getvalue("buildid", default="").strip()
        validate(buildid)

        comment = ' '.join(form.getvalue("comment", default="").split())
        match = form.getvalue("match", default="").strip()
        if match is "": match = None
        p1 = sorted([int(s) for s in (form.getvalue("phase1-%d" % (n+1)) for n in range(maxstations)) if s is not None])
        p2 = sorted([int(s) for s in (form.getvalue("phase2-%d" % (n+1)) for n in range(maxstations)) if s is not None])
        p3 = sorted([int(s) for s in (form.getvalue("phase3-%d" % (n+1)) for n in range(maxstations)) if s is not None])
        p4 = sorted([int(s) for s in (form.getvalue("phase4-%d" % (n+1)) for n in range(maxstations)) if s is not None])

        if not len(p1):
            raise Exception("Must specify at least one phase 1 test station")

        if len(p3) and not len(p2):
            raise Exception("Can't specify phase 3 test stations without phase 2")

        if len(p4) and not len(p3):
            raise Exception("Can't specify phase 4 test stations without phase 3")

        for n in tuple(p1+p2+p3+p4):
            if n < 1 or n > 200:
                raise Exception("Test station must be 1 to 200")

        # merge all into a list of other+(4*maxstations) strings/Nones
        return tuple([buildid, comment, match] + [s for p in [p1, p2, p3, p4] for s in map(str,p)+[None]*(maxstations-len(p))])

    conn=psycopg2.connect('dbname=factory')
    cur=conn.cursor()

    form=submitted()

    content=None

    if 'action' in form:
        action=[form.getvalue('action'), None]
        if '=' in action[0]: action = form.getvalue('action').split('=',1)
        if action[0] == 'none':
            pass
        elif action[0] == 'new':
            content = (
                "<form method=get>" +
                makeform(None) +
                "<p>" +
                "<button name=action value=insert>Save</button>" +
                "</form>" )
        elif action[0] == 'insert':
            cur.execute("insert into builds (buildid, comment, match " +
                        "".join(", phase1[%d]" % (n+1) for n in range(maxstations)) +
                        "".join(", phase2[%d]" % (n+1) for n in range(maxstations)) +
                        "".join(", phase3[%d]" % (n+1) for n in range(maxstations)) +
                        "".join(", phase4[%d]" % (n+1) for n in range(maxstations)) +
                        ") values (" +
                        ",".join(["%s"]*(other+(maxstations*4))) +
                        ")", getvalues(form))
            conn.commit()
            reload()
        elif action[0] == "del":
            content = ("<form method=get>Really delete build ID '%s'? "% action[1] +
                       "<button name=action value='really=%s'>Yes</button>" % escape(action[1]) +
                       "</form>")
        elif action[0] == "really":
            validate(action[1], exists=True)
            tarball=os.path.join(base,"%s.tar.gz" % action[1])
            if os.path.isfile(tarball): os.remove(tarball)
            cur.execute("delete from builds where buildid=%s", (action[1],))
            conn.commit()
            reload()
        elif action[0] == "edit":
            cur.execute("select buildid, comment, match " +
                        "".join(", phase1[%d]" % (n+1) for n in range(maxstations)) +
                        "".join(", phase2[%d]" % (n+1) for n in range(maxstations)) +
                        "".join(", phase3[%d]" % (n+1) for n in range(maxstations)) +
                        "".join(", phase4[%d]" % (n+1) for n in range(maxstations)) +
                        " from builds where buildid = %s", (action[1],))
            row = cur.fetchone()
            content = ("<form method=get>" +
                       makeform(row) +
                       "<p>" +
                       "<button name=action value='update=%s'>Update</button>" % escape(row[0]) +
                       "</form>")
        elif action[0] == "clone":
            cur.execute("select '', comment, '' " +
                        "".join(", phase1[%d]" % (n+1) for n in range(maxstations)) +
                        "".join(", phase2[%d]" % (n+1) for n in range(maxstations)) +
                        "".join(", phase3[%d]" % (n+1) for n in range(maxstations)) +
                        "".join(", phase4[%d]" % (n+1) for n in range(maxstations)) +
                        " from builds where buildid = %s", (action[1],))
            row = cur.fetchone()
            content = ("<form method=get>" +
                       makeform(row) +
                       "<p>" +
                       "<button name=action value=insert>Save</button>" +
                       "</form>")
        elif action[0] == 'update':
            values=getvalues(form, action[1])
            cur.execute("update builds set comment=%s, match=%s" +
                        "".join(", phase1[%d]=%%s" % (n+1) for n in range(maxstations)) +
                        "".join(", phase2[%d]=%%s" % (n+1) for n in range(maxstations)) +
                        "".join(", phase3[%d]=%%s" % (n+1) for n in range(maxstations)) +
                        "".join(", phase4[%d]=%%s" % (n+1) for n in range(maxstations)) +
                        " where buildid=%s", values[1:]+(action[1],))
            conn.commit()
            reload()
        elif action[0] == "upload":
            validate(action[1], exists=True)
            if not "upload" in form:
                # note the action is left as is, so we'll come back here with an 'upload' element
                content = ("<form enctype=multipart/form-data method=post>" +
                           "Select a diagnostic tarball for build ID <b>%s</b> and click 'Upload'." % action[1] +
                           "<p><input type=file name=upload accept=.tar.gz> <input type=submit value=Upload>" +
                           "</form>"+
                           "<p><b>Note:</b> The selected file must be a gzipped tarball. It will be saved as '%s.tar.gz', regardless of its original name." % action[1])
            else:
                upload=form["upload"]
                if not upload.file: raise Exception("Malformed upload submit")
                chunk = upload.file.read(65536)
                if not chunk: raise Exception("No upload content")
                f = file(os.path.join(base, "%s.tar.gz"%action[1]), 'wb')
                while 1:
                    f.write(chunk)
                    chunk = upload.file.read(65536)
                    if not chunk: break
                f.close()
                reload()

        else:
            raise Exception("Invalid action = %s %s" % tuple(action))

    if not content:
        # Generate the default page content
        cur.execute("select buildid, comment, match" +
                    "".join(", phase1[%d]" % (n+1) for n in range(maxstations)) +
                    "".join(", phase2[%d]" % (n+1) for n in range(maxstations)) +
                    "".join(", phase3[%d]" % (n+1) for n in range(maxstations)) +
                    "".join(", phase4[%d]" % (n+1) for n in range(maxstations)) +
                    " from builds order by buildid")
        if not cur.rowcount:
            content = "No builds defined"
        else:
            rows=cur.fetchall(); # get list of tuples
            content = table(("list",
                             [
                                 ["Build ID", "Phase 1", "Phase 2", "Phase 3", "Phase 4", "Match", "Comment",
                                  help("Tarball", "Information about the tarball associated with the build ID (click 'Upload' to add or update it')"),
                                  "&nbsp;"]
                             ] +
                             [ [ row[0],
                                 ", ".join(" ".join(escape(row[other:other+maxstations])).split()),
                                 ", ".join(" ".join(escape(row[other+maxstations:other+2*maxstations])).split()),
                                 ", ".join(" ".join(escape(row[other+2*maxstations:other+3*maxstations])).split()),
                                 ", ".join(" ".join(escape(row[other+3*maxstations:other+4*maxstations])).split()),
				 '' if row[2] is None else row[2], # match
                                 row[1], # comment
                                 fileinfo(row[0]),
                                 ( "<form method=get>" +
                                   "<button name=action value='edit=%s'>Edit</button>" % escape(row[0]) +
                                   "<button name=action value='del=%s'>Del</button>" % escape(row[0]) +
                                   "<button name=action value='clone=%s'>Clone</button>" % escape(row[0]) +
                                   "<button name=action value='upload=%s'>Upload</button>" % escape(row[0]) +
                                   "</form>" )
                               ] for row in rows
                             ]
                            ))
        content += "<p><form method=get><button name=action value=new>New build</button></form>"

    # print generated content
    print html("Build Manager", content)

except Exception as e:
    print "Content-type: text/plain; charset=utf-8\n\nAn error has occurred"
    print
    traceback.print_exc(file = sys.stdout)
    print
    for k in sorted(form.keys()): print k,"=",form.getvalue(k)
