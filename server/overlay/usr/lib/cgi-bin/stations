#!/usr/bin/python2

import traceback, re, sys, os, psycopg2, subprocess
from util import *

authenticate("Supervisor", "supervisor:superx5")

try:

    # update the dnsmasq dhcp configuration with current contents of stations database
    def dnsmasq():
        p = subprocess.Popen(["sudo","/etc/factory/update.dnsmasq"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        stdout = p.communicate()[0]
        p.stdout.close()
        status = p.returncode

        if not stdout:
            stdout="update.dnsmasq unknown failure"
        if status:
            raise Exception("%s (%d)" % (stdout.split("\n")[0], status))

    conn=psycopg2.connect('dbname=factory')
    cur=conn.cursor()

    form=submitted()

    content=None

    def getvalues(form):
        if 'station' in form:
            station=int(form.getvalue('station'))
        else:
            station = None
        mac=form.getvalue('mac',default="").strip()
        if mac == "": raise Exception("Must provide a MAC address")
        fixture=' '.join(form.getvalue('fixture',default='').split())
        s=re.search('[^-_.a-zA-Z0-9]', fixture)
        if s: raise Exception("Fixture cannot contain '%s'" % s.group())
        comment=' '.join(form.getvalue('comment',default='').split())
        return (station, mac, fixture, comment)

    def makeform(row):
        row = escape(list(row) if row else [None for n in range(4)])
        return table(("form", [
            [ help("Station ID","""
A number, 1 to 200. This is used as the last octet of the test station
controller's IP address.
                   """), row[0] if row[0] else "<input name=station type=text>" ],
            [ help("Station MAC","""
The ethernet MAC address of the test station controller which will be assigned
this station ID.
                   """), "<input name=mac type=text value='%s'>" % row[1] ],
            [ help("Fixture","""
A string passed to the test station controller when it boots, which tells it
what code to run in order to control the attached test hardware.

Leave it blank to let the test station controller operate in default
hardware-less mode.

Otherwise it must be the basename of a .tar.gz file in the downloads/fixtures
directory.
                   """),"<input name=fixture type=text value='%s'>" % row[2] ],
            [ help("Comment","""
This optional string appears in the station list, to help keep track of what
each station is for.
                    """), "<input name=comment type=text value='%s'>" % row[3] ]
            ]))

    if 'action' in form:
        action=[form.getvalue('action'), None]
        if '=' in action[0]: action=action[0].split('=',1)
        if action[0] == 'none':
            reload()
        elif action[0] == 'new':
            content = ("<form method=get>"+
                        makeform(None)+
                        "<button name=action value='insert'>Save</button>" +
                        "</form>")
        elif action[0] == 'insert':
                cur.execute('insert into stations (station,mac,fixture,comment) values(%s,%s,%s,%s)', getvalues(form))
                conn.commit()
                dnsmasq()
                reload()
        elif action[0] == 'del':
            content = ("<form method=get>" +
                       "Really delete station %s?&nbsp;" % escape(action[1]) +
                       "<button name=action value='really=%s'>Yes</button>" % escape(action[1]) +
                       "</form>" )
        elif action[0] == 'really':
                cur.execute('delete from stations where station=%s', (action[1],))
                conn.commit()
                dnsmasq()
                reload()
        elif action[0] == 'edit':
            cur.execute("select station, mac, fixture, comment from stations where station = %s", (action[1],))
            row = cur.fetchone()
            content = ("<form method=get>" +
                        makeform(row) +
                        "<button name=action value='update=%s'>Save</button>" % row[0] +
                        "</form>")
        elif action[0] == 'update':
            cur.execute('update stations set mac=%s, fixture=%s, comment=%s where station=%s', getvalues(form)[1:]+(action[1],))
            conn.commit()
            dnsmasq()
            reload()
        else:
            raise Exception('Invalid action = "%s %s' % tuple(action))

    if not content:
        cur.execute('select station,mac,fixture,comment from stations order by station')
        if not cur.rowcount:
            content = "No stations!"
        else:
            rows=cur.fetchall()
            content = table(("list",
                              [
                                  ["Station","MAC","Fixture","Comment","&nbsp;"]
                              ] +
                              [ ( escape(list(row)) +
                                  [ ("<form method=get>" +
                                     "<button name=action value='edit=%s'>Edit</button>" % escape(row[0]) +
                                     "<button name=action value='del=%s'>Delete</button>" % escape(row[0]) +
                                     "</form>"
                                    )
                                  ]
                                ) for row in rows
                              ]
                             ))
        content += "<p><form method=get><button name=action value=new>New station</button></form>"

    # print generated content
    print html("Station Manager", content)

except:
    print "Content-type: text/plain; charset=utf-8\n\nAn error has occurred"
    print
    traceback.print_exc(file = sys.stdout)
    print
    for k in sorted(form.keys()): print k,"=",form.getvalue(k)
