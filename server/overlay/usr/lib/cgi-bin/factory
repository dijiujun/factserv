#!/usr/bin/python

# This CGI provides DUT services. Any server error results in a 4XX response
# which DUT must treat as fatal.

try:

    import traceback, os, cgi, sys, psycopg2

    sys.stderr = sys.stdout
    # print "Content-type: text/plain\n" # enable for debug only

    me = sys.argv[0].split("/")[-1]

    conn = psycopg2.connect("dbname=factory")
    cur = conn.cursor()

    # subclass cgi.FieldStorage, force getvalue text to legal ascii
    class submitted(cgi.FieldStorage):
        def getvalue(self, key, default=None):
            v=cgi.FieldStorage.getvalue(self, key, default)
            if isinstance(v,str): v=v.replace('\x00','').decode('ascii','ignore').encode('ascii')
            return v
    form = submitted()
    
    for l in open("/etc/factory/config"):
        k=l.split('=',2)
        if k[0] == "dut_ip":
            dut_ip=k[1].strip()
            break
    if not dut_ip: raise Exception("Can't find 'dut_ip' in /etc/factory/config")

    station = None
    try:
        remote = os.environ["REMOTE_ADDR"]
    except:
        remote="127.0.0.1"

    if remote == "127.0.0.1" or remote == dut_ip:
        station = 0
        fixture = ""
    else:
        prefix=".".join(k[1].split(".")[0:3])+"."
        if not remote.startswith(prefix): raise Exception("Request from IP %s is not allowed (expecting prefix %s)" % (remote,prefix))
        station = remote.split(".")[3]
        cur.execute("select fixture from stations where station=%s", (station,))
        if not cur.rowcount: raise Exception("Request from IP %s is not allowed (unknown test station)" % (remote,))
        fixture = cur.fetchone()[0]

    # get specified parameter from form or die
    def require(p):
        v = form.getvalue(p)
        if v is None: raise Exception("Requires param '%s'" % p)
        return v

    # vaildate buildid, return dict containing the builds table row
    # postgres array syntax is borked
    # build["phaseX"] is true if phase X is enabled on the requesting station
    # build["hasphaseX"] is true if phase X is enabled on *any* station
    def checkbuild(buildid):
        cur.execute("select %s=any(phase1), %s=any(phase2), %s=any(phase3), %s=any(phase4), 0=all(phase2) is not NULL, 0=all(phase3) is not NULL, 0=all(phase4) is not NULL from builds where buildid=%s", (station, station, station, station, buildid))
        if not cur.rowcount: raise Exception("Invalid buildid '%s'" % (buildid,))
        build={}
        build["phase1"],build["phase2"],build["phase3"],build["phase4"],build["hasphase2"],build["hasphase3"],build["hasphase4"]=cur.fetchone()
        if not (build["phase1"] or build["phase2"] or build["phase3"] or build["phase4"]): raise Exception("Buildid %s not enabled for station %s" % (buildid, station))
        return build

    ok = None

    service=require("service")	

    if service == "download":
        # Validate given buildID and redirect to a tarball with that name
        # The redirect is handled by Apache, the client won't see it
        buildid = require("buildid")
        build = checkbuild(buildid)
        if os.path.isfile("/var/www/html/downloads/%s/%s.tar.gz" % (station,buildid)):
            print "Location: /downloads/%s/%s.tar.gz\n" % (station,buildid)
            quit()
        if os.path.isfile("/var/www/html/downloads/%s.tar.gz" % buildid):
            print "Location: /downloads/%s.tar.gz\n" % buildid
            quit()
        raise Exception("No tarball for build ID '%s'" % buildid)

    elif service == "newdevice":
        # Validate that the given buildID is allowed to do phase 1 testing
        # If device ID is also given, insert or update the entry in the deviceID table
        buildid = require("buildid")
        build = checkbuild(buildid)
        if not build["phase1"]: raise Exception("newdevice is disallowed for buildid %s on station %s" % (buildid,station))

        deviceid = form.getvalue("deviceid")
        if deviceid:
            # if deviceid is given, (re)init the device table for phase1
            cur.execute("insert into devices (deviceid, buildid, station, state) values (%s, %s, %s, 'UNKNOWN') on conflict(deviceid) do update set buildid=%s, station=%s, state='UNKNOWN', phase=1",
                        (deviceid, buildid, station, buildid, station))
            conn.commit()
        ok=""

    elif service == "startdiag" or service == "startsession":
        # Start diagnostic session for given device.
        # startdiag is deprecated, use startsession instead, which returns a sessionid to be used with endsession
        deviceid = require("deviceid")
        buildid = require("buildid")
        build = checkbuild(buildid)

        cur.execute("select state, phase from devices where deviceid=%s", (deviceid,))
        if not cur.rowcount:
            if not build["phase1"]: raise Exception("Phase1 disallowed for unknown device %s running buildid %s on station %s" % (deviceid,buildid,station))
            cur.execute("insert into devices (state, phase, station, buildid, deviceid) values ('TESTING', 1, %s, %s, %s)", (station, buildid, deviceid))
            phase=1
        else:
            state, phase = cur.fetchone()
            if state == "COMPLETE": phase = 4
            elif state == "PASSED": phase += 1
            p = phase
            # regress phase until we find one that's allowed on this station
            if phase == 4 and not build["phase4"]: phase = 3
            if phase == 3 and not build["phase3"]: phase = 2
            if phase == 2 and not build["phase2"]: phase = 1
            if phase == 1 and not build["phase1"]: raise Exception("can't perform phase %s or any predecessor for buildid %s on station %s" % (p, buildid, station))
            cur.execute("update devices set state='TESTING', phase=%s, station=%s, buildid=%s  where deviceid=%s", (phase, station, buildid, deviceid))
        # add an entry into the test table
        if service == "startsession":
            cur.execute("insert into tests (deviceid, station, phase, command, testname) values (%s, %s, %s, %s, %s) returning id", (deviceid, station, phase, "", "*** SESSION ***"))
            ok="%d %s" % (phase, cur.fetchone()[0])
        else:
            ok="%d" % phase
        conn.commit()

    elif service == "starttest":
        # start a new test for specified deviceid, with command and test name strings, returns a test ID which is used to end the test
        deviceid = require("deviceid")
        command = require("command")
        testname = form.getvalue("testname")
        if testname is None: testname=""

        cur.execute("select phase from devices where deviceid=%s and (state='TESTING' or state='FAILING') and station=%s", (deviceid, station))
        if not cur.rowcount: raise Exception("Test not in progress for device %s on station %s" % (deviceid, station))
        phase = cur.fetchone()[0]
        cur.execute("insert into tests (deviceid, station, phase, command, testname) values (%s, %s, %s, %s, %s) returning id", (deviceid, station, phase, command, testname))
        conn.commit()
        ok = cur.fetchone()[0] # returns the test id

    elif service == "endtest":
        # Given the test ID returned by starttest, update the record with end time, status, and stdout.
        # If the test failed then the device goes into the failed state, even if it will continue testing
        testid = require("testid")
        deviceid = require("deviceid")
        stdout = require("stdout")
        status = require("status")

        # get the status of specified test record
        cur.execute("select deviceid=%s and status is NULL and station=%s from tests where id=%s", (deviceid, station, testid))
        if not cur.fetchone()[0]: raise Exception("Test ID %s is in wrong state for deviceid=%s" % (testid, deviceid))
        cur.execute("update tests set ended=uct(), status=%s, stdout=%s where id=%s", (status, stdout, testid))
        # mark device as test failing if non-zero exit status
        if status != "0": cur.execute("update devices set state='FAILING' where deviceid=%s", (deviceid,))
        conn.commit()
        ok=""

    elif service == "enddiag" or service == "endsession":
        # End current diagnostic session for specified deviceid. If it's in the
        # TESTING state then that means all tests passed, put it into the
        # PASSED state if there are more phases left to do, or the COMPLETE
        # state if all test phases have been performed.
        # enddiag is deprecated, use endsession which requires a session ID and updates the SESSION entry in the tests table
        deviceid = require("deviceid")

        cur.execute("select state, phase, buildid from devices where deviceid=%s", (deviceid,))
        if not cur.rowcount: raise Exception("No record for deviceid %s" % (deviceid,))
        state, phase, buildid = cur.fetchone()

        if state == "FAILING":
            state = "FAILED"
        elif state == 'TESTING':
            build = checkbuild(buildid)
            if (phase==1 and build["hasphase2"]) or (phase==2 and build["hasphase3"]) or (phase==3 and build["hasphase4"]):
                state="PASSED" # prepare for next phase
            else:
                state="COMPLETE" # there is no next phase!
        else:
            raise Exception("Expected deviceid %s state TESTING or FAILING, actual state is %s" % (deviceid, state))
        cur.execute("update devices set state=%s where deviceid=%s", (state, deviceid))
        conn.commit()
        if service == "endsession":
            sessionid=require("sessionid")
            cur.execute("update tests set ended=uct(), status=%d where id=%s" % (-2 if state=="FAILED" else 0, sessionid))
            conn.commit()
        ok="%s %s" % (state, phase)

    elif service == "setprovision":
        # write arbitrary value to provision table column p_<key> for specified deviceid
        deviceid = require("deviceid")
        key = require("key")
        if not key.isalnum(): raise Exception("Invalid key '%s'" % (key,))
        key="p_"+key
        value = require("value")
        cur.execute("insert into provisioned (deviceid, %s) values (%%s, %%s) on conflict(deviceid) do update set %s=%%s" % (key,key), (deviceid,value,value))
        ok=""

    elif service == "getprovision":
        # get provision table column p_<key> for specified deviceid
        deviceid = require("deviceid")
        key = require("key")
        if not key.isalnum(): raise Exception("Invalid key '%s'" % (key,))
        key="p_"+key
        cur.execute("select %s from provisioned where deviceid = %%s" % (key,),(deviceid,))
        ok = cur.fetchone()[0]

    elif service == "fixture":
        # This is invoked by pionic during startup, if a string is returned
        # then it will download fixture.tar.gz and run the named script inside.
        # Also used by startdiag.sh to detect that a factory server exists.
        ok=fixture

    else:
        raise Exception("Invalid service '%s'" % (service,))

    # print the result in 'ok'
    print "Content-type: text/plain\n\n%s" % ok

except Exception:
    t,v,tb=sys.exc_info()
    print "Status: 400 %s: %s (%d)\nContent-type: text/plain\n" % (str(t), str(v), tb.tb_lineno)
    # other output will appear if you use curl
    traceback.print_exc(file = sys.stdout)
    if station is not None: print "Station ID:",station
    for k in sorted(os.environ): print k,"=",os.environ[k]
    for k in sorted(form.keys()): print k,"=",form.getvalue(k)
