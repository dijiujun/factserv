#!/usr/bin/python2

import traceback, sys, psycopg2, os 
from util import *

#authenticate("Technician","tech:techx4")

try:
    conn=psycopg2.connect('dbname=factory')
    cur=conn.cursor()

    content=""

    form=submitted()

    if "action" in form:
        action=[form.getvalue('action'), None]
        if '=' in action[0]: action = form.getvalue('action').split('=',1)
        if action[0] == 'none':
            pass
        elif action[0] == 'reset':
            content=("<form method=get>"+
                         "Really reset the test state for <b>%s</b>?&nbsp;" % escape(action[1]) +
                         "<button name=action value='yes=%s'>Yes</button>" % action[1] +
                         "<button name=action value=none>No</button>" +
                     "</form>")
        elif action[0]=='yes':
            cur.execute("update devices set phase=1, state='UNKNOWN', station=0 where deviceid=%s and state != 'COMPLETE'", (action[1],))
            conn.commit()

        else:
             raise Exception("Invalid action = %s %s" % tuple(action))

    if not content:
        # no action, or action did not generate content
        deviceid_types={"~":"contains",     "!~":"doesn't contain", "=":"is"}
        buildid_types= {"~":"contains",     "!~":"doesn't contain"}
        created_types= {"<":"is before",    ">=":"is after"}
        updated_types= {"<":"is before",    ">=":"is after"}
        state_types=   {"=":"is",           "!=":"is not"}
        phase_types=   {"=":"is",           "!=":"is not"}
        station_types= {"=":"is",           "!=":"is not"}
        # get possible test states
        cur.execute("select unnest(enum_range(NULL::states))")
        states=[r[0] for r in cur.fetchall()]

        deviceid=form.getvalue('deviceid')
        deviceid_type=form.getvalue('deviceid_type') or '~'
        buildid=form.getvalue('buildid')
        buildid_type=form.getvalue('buildid_type') or '~'
        created=form.getvalue('created')
        created_type=form.getvalue('created_type') or '>='
        updated=form.getvalue('updated')
        updated_type=form.getvalue('updated_type') or '>='
        state=form.getvalue('state')
        state_type=form.getvalue('state_type') or '='
        phase=form.getvalue('phase')
        phase_type=form.getvalue('phase_type') or '='
        station=form.getvalue('station')
        station_type=form.getvalue('station_type') or '='
        sort=form.getvalue('sort') or 'desc';
        limit=form.getvalue('limit') or "100";

        if state:
            state=state.upper()
            if state not in states: raise Exception("Invalid state %s" % state)

        where=[]

        if deviceid:
            if deviceid_type not in deviceid_types: raise Exception("Invalid deviceid_type %s" % (deviceid_type,))
            where += [cur.mogrify("lower(deviceid) %s lower(%%s)" % (deviceid_type,) ,(deviceid,))]

        if buildid:
            if buildid_type not in buildid_types: raise Exception("Invalid buildid_type %s" % (buildid_type,))
            where += [cur.mogrify("lower(buildid) %s lower(%%s)" % (buildid_type,) ,(buildid,))]

        if created:
            if created_type not in created_types: raise Exception("Invalid created_type %s" % (created_type,))
            where += [cur.mogrify("created %s %%s" % (created_type,) ,(created,))]

        if updated:
            if updated_type not in updated_types: raise Exception("Invalid updated_type %s" % (updated_type,))
            where += [cur.mogrify("updated %s %%s" % (updated_type,) ,(updated,))]

        if state:
            if state_type not in state_types: raise Exception("Invalid state_type %s" % (state_type,))
            where += [cur.mogrify("state %s %%s" % (state_type,) ,(state,))]

        if phase:
            if phase_type not in phase_types: raise Exception("Invalid phase_type %s" % (phase_type,))
            where += [cur.mogrify("phase %s %%s" % (phase_type,) ,(phase,))]

        if station:
            if station_type not in station_types: raise Exception("Invalid station_type %s" % (station_type,))
            where += [cur.mogrify("station %s %%s" % (station_type,) ,(station,))]

        content=("<form method=get>" +
                     table(("form",
                              [
                                  ["Device ID", select("deviceid_type",deviceid_types, deviceid_type or "="),   "<input type=text name=deviceid value='%s'>" % escape(deviceid)],
                                  ["Build ID",  select("buildid_type", buildid_types, buildid_type or "="),     "<input type=text name=buildid value='%s'>" % escape(buildid)],
                                  ["Created",   select("created_type", created_types, created_type or "="),     "<input type=text name=created value='%s'>" % escape(created)],
                                  ["Updated",   select("updated_type", updated_types, updated_type or "="),     "<input type=text name=updated value='%s'>" % escape(updated)],
                                  ["State",     select("state_type", state_types, state_type or "="),           select("state",{a:a for a in [""]+states}, state)],
                                  ["Phase",     select("phase_type", phase_types, phase_type or "="),           "<input type=text name=phase value='%s'>" % escape(phase)],
                                  ["Station",   select("station_type", station_types, station_type or "="),     "<input type=text name=station value='%s'>" % escape(station)],
                                  ["Sort",      select("sort", {"asc":"ascending", "desc":"descending"}, sort), "(note, sorts on 'Updated')"],
                                  ["Limit",     "<input type=text name=limit value='%s'>" % escape(limit),      "&nbsp"],
                              ]
                          ))+
                     "<input style='float:left; vertical-align:text-bottom' type=submit value=Filter></form>"+
                     "<form method=get><input style='vertical-align:text-bottom' type=submit value=Reset>"+
                 "</form>"+
                 "<hr>")
        cur.execute("select deviceid, buildid, date_trunc('seconds',created), date_trunc('seconds',updated), state, phase, station, " +
                    "(state='TESTING' or state='FAILING') and updated < now()-interval '10 minutes' as stale, " +
                    "state='PASSED' or state='FAILED' as idle " +
                    "from devices "+ 
                    ("where " + "and ".join(where) + " " if where else "") + 
                    "order by updated %s limit %s" % (sort,limit))
        if not cur.rowcount:
            content += "No match!"
        else:
            rows=cur.fetchall()
            content += table(("data",
                             [
                                 ["Device ID","Build ID","Created","Updated","State","Phase","Station"]
                             ] +
                             [( "STALE" if stale else state,
                                 [ click(deviceid,"action=tests", {"deviceid":deviceid,"deviceid_type":"="}) ] +
                                 [ buildid, created, updated ] +
                                 [ click(state, None, {"action":"reset=%s" % deviceid}) if idle or stale else escape(state) ] +
                                 [ phase, station ]
                              ) for deviceid, buildid, created, updated, state, phase, station, stale, idle in rows
                             ]
                           ))

    # print generated content with tick footer
    print html("Device History", None, content + tick_footer())

except:
    print "Content-type: text/plain\n\nAn error has occurred"
    print
    traceback.print_exc(file = sys.stdout)
    print
    for k in sorted(form.keys()): print k,"=",form.getvalue(k)
