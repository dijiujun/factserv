#!/usr/bin/python2

# Return named status as json

import traceback, sys, os, cgi, psycopg2, psycopg2.extras, json

try:
    # recursively stringify arbitrary data structure, None becomes '', unknown types become str
    def stringify(d):
        if isinstance(d, dict): return dict(map(lambda k:[k,stringify(d[k])], d.keys()))
        if isinstance(d, tuple): return tuple(stringify(list(d)))
        if isinstance(d, list): return map(lambda r:stringify(r), d)
        if isinstance(d, (int,str)): return d
        return '' if d is None else str(d)

    conn=psycopg2.connect('dbname=factory')
    cur=conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)

    data=None

    form=cgi.FieldStorage()
    what=form.getvalue('what')
    if what == 'now':
        # return current server time
        cur.execute("select date_trunc('second',uct()) as now")

    elif what == 'stations':
        # return list of stations with latest session information
        cur.execute("""
            select *, state = 'TESTING' and elapsed > 600 as stale from (
                select
                    se.id as sessionid,
                    st.station,
                    se.deviceid,
                    de.buildid,
                    se.phase,
                    se.state,
                    date_trunc('seconds',se.started) as started,
                    te.testname,
                    se.id as sessionid,
                    floor(case when te.started is null
                          then extract(epoch from uct()-se.started)
                          else extract(epoch from uct()-te.started)
                          end) as elapsed
                from (select distinct on (station) * from sessions where station != 0 order by station, started desc) se
                join devices de on se.deviceid = de.deviceid
       		left join (select distinct on (station) * from tests order by station, started desc) te on te.sessionid = se.id
                right join stations st on st.station = se.station
        ) q order by station
        """)

    elif what == 'device':
        # return device status
        deviceid=form.getvalue('deviceid')
        cur.execute("select deviceid, buildid, state, phase, station, date_trunc('second',created) as created, date_trunc('second',updated) as updated from devices where deviceid=%s", (deviceid,))

    else:
        raise Exception("Invalid status request '%s'" % what)

    if not cur.rowcount: raise Exception("No results")

    data=cur.fetchall()

    if "raw" in form:
        print "Content-type: text/plain\n\n" + str(data)
    else:
        print "Content-type: application/json\n\n" + json.dumps(stringify(data))

except Exception:
    print "Content-type: text/plain; charset=utf-8\n\nAn error has occurred"
    print
    traceback.print_exc(file = sys.stdout)
    print
    for k in sorted(form.keys()): print k,"=",form.getvalue(k)
